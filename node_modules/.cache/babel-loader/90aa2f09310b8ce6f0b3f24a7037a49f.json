{"ast":null,"code":"var _jsxFileName = \"/home/jagrati/usernex/client/src/components/adduserfunComponent.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { useDropzone } from 'react-dropzone';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst moment = require('moment');\n\nconst LoginSchema = Yup.object().shape({\n  fname: Yup.string().min(3, \"fname must be 3 characters at minimum\").required(\"first name is required\"),\n  lname: Yup.string().min(3, \"lname must be 3 characters at minimum\").required(\"last name is required\"),\n  email: Yup.string().email(\"Invalid email address format\").required(\"Email is required\"),\n  password: Yup.string().min(3, \"Password must be 3 characters at minimum\").required(\"Password is required\"),\n  dob: Yup.string().required(\"DOB is Required\").test(\"DOB\", \"Please choose a valid date of birth\", value => {\n    return moment().diff(moment(value), \"years\") >= 1;\n  }),\n  profileImg: Yup.mixed().required(\"image is Required\")\n});\n\nclass Thumb extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: false,\n      thumb: undefined\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.file) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    }, () => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({\n          loading: false,\n          thumb: reader.result\n        });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  }\n\n  render() {\n    const {\n      file\n    } = this.props;\n    const {\n      loading,\n      thumb\n    } = this.state;\n\n    if (!file) {\n      return null;\n    }\n\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: thumb,\n      alt: file.name,\n      className: \"img-thumbnail mt-2\",\n      height: 200,\n      width: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Adduserfun extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSubmit = values => {\n      alert(JSON.stringify(values, null, 2));\n    };\n  }\n\n  Uploadimage(props) {\n    // alert(\"The function 'test' is executed\");\n\n    /*#__PURE__*/\n    _jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this); // const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n    // const files = acceptedFiles.map(file => (\n    //   <li key={file.path}>\n    //     {file.path} - {file.size} bytes\n    //   </li>\n    // ));\n    // return (\n    //   <section className=\"container\">\n    //     <div {...getRootProps({className: 'dropzone'})}>\n    //       <input {...getInputProps()} />\n    //       <p>Drag 'n' drop some files here, or click to select files</p>\n    //     </div>\n    //     <aside>\n    //       <h4>Files</h4>\n    //       <ul>{files}</ul>\n    //     </aside>\n    //   </section>\n    // );\n\n  }\n\n  // axios.post(\"http://localhost:4000/users/add-user\",  values)\n  // .then(console.log)\n  //  alert('SUCCESS!! ' )\n  render() {\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        fname: \"\",\n        lname: \"\",\n        email: \"\",\n        password: \"\",\n        dob: \"\",\n        profileImg: \"\"\n      },\n      validationSchema: LoginSchema //onSubmit={this.handleSubmit}\n      ,\n      onSubmit: values => {\n        // console.log(values);\n        const formData = new FormData();\n        formData.append('fname', values.fname);\n        formData.append('lname', values.lname);\n        formData.append('email', values.email);\n        formData.append('password', values.password);\n        formData.append('dob', values.dob);\n        formData.append('profileImg', values.profileImg); // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n\n        axios.post(\"http://localhost:4000/users/add-user\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        }).then(console.log);\n        alert('SUCCESS!! '); // catch(console.error);\n        //  resetForm({});\n      },\n      render: _ref => {\n        let {\n          setFieldValue,\n          errors,\n          status,\n          touched\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"fname\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              name: \"fname\",\n              placeholder: \"Enter first name\",\n              autoComplete: \"off\",\n              className: `mt-2 form-control\n                        ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"fname\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"lname\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              name: \"lname\",\n              placeholder: \"Enter last name\",\n              autoComplete: \"off\",\n              className: `mt-2 form-control\n                        ${touched.lname && errors.lname ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"lname\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Enter email\",\n              autoComplete: \"off\",\n              className: `mt-2 form-control\n                        ${touched.email && errors.email ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"email\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              className: \"mt-3\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"password\",\n              name: \"password\",\n              placeholder: \"Enter password\",\n              className: `mt-2 form-control\n                        ${touched.password && errors.password ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"password\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"dob\",\n              className: \"mt-3\",\n              children: \"Date Of Birth\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"date\",\n              name: \"dob\",\n              placeholder: \"Enter Date Of Birth\",\n              className: `mt-2 form-control\n                        ${touched.dob && errors.dob ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"dob\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"imagem\",\n            className: \"mt-3\",\n            children: \"Upload Your Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"file\",\n            name: \"profile\",\n            type: \"file\",\n            onChange: event => {\n              const File = event.target.files[0];\n              setFieldValue(\"profileImg\", File);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary mr-2\",\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"btn btn-secondary\",\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 19\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Adduserfun;","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/adduserfunComponent.js"],"names":["React","axios","useDropzone","Formik","Field","Form","ErrorMessage","Yup","moment","require","LoginSchema","object","shape","fname","string","min","required","lname","email","password","dob","test","value","diff","profileImg","mixed","Thumb","Component","state","loading","thumb","undefined","componentWillReceiveProps","nextProps","file","setState","reader","FileReader","onloadend","result","readAsDataURL","render","props","name","Adduserfun","handleSubmit","values","alert","JSON","stringify","Uploadimage","formData","FormData","append","post","headers","then","console","log","setFieldValue","errors","status","touched","event","File","target","files"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {useDropzone} from 'react-dropzone'\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nconst moment = require('moment');\nconst LoginSchema = Yup.object().shape({\n  fname: Yup.string()\n  .min(3, \"fname must be 3 characters at minimum\")\n  .required(\"first name is required\"),\n  lname: Yup.string()\n  .min(3, \"lname must be 3 characters at minimum\")\n  .required(\"last name is required\"),\n  email: Yup.string()\n    .email(\"Invalid email address format\")\n    .required(\"Email is required\"),\n  password: Yup.string()\n    .min(3, \"Password must be 3 characters at minimum\")\n    .required(\"Password is required\"),\n    dob:Yup.string()\n    .required(\"DOB is Required\")\n   \n    .test(\"DOB\", \"Please choose a valid date of birth\", (value) => {\n      return moment().diff(moment(value), \"years\") >= 1;\n    }),\n    profileImg: Yup.mixed().required(\"image is Required\")\n});\n\nclass Thumb extends React.Component {\n  state = {\n    loading: false,\n    thumb: undefined,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.file) { return; }\n\n    this.setState({ loading: true }, () => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({ loading: false, thumb: reader.result });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  }\n\n  render() {\n    const { file } = this.props;\n    const { loading, thumb } = this.state;\n\n    if (!file) { return null; }\n\n    if (loading) { return <p>loading...</p>; }\n\n    return (<img src={thumb}\n      alt={file.name}\n      className=\"img-thumbnail mt-2\"\n      height={200}\n      width={200} />);\n  }\n}\n\n\n\nclass Adduserfun extends React.Component {\n\n  Uploadimage(props) {\n   // alert(\"The function 'test' is executed\");\n    <Form>\n    <input type=\"file\"  ></input>\n    </Form>\n    // const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n    \n    // const files = acceptedFiles.map(file => (\n    //   <li key={file.path}>\n    //     {file.path} - {file.size} bytes\n    //   </li>\n    // ));\n  \n    // return (\n    //   <section className=\"container\">\n    //     <div {...getRootProps({className: 'dropzone'})}>\n    //       <input {...getInputProps()} />\n    //       <p>Drag 'n' drop some files here, or click to select files</p>\n    //     </div>\n    //     <aside>\n    //       <h4>Files</h4>\n    //       <ul>{files}</ul>\n    //     </aside>\n    //   </section>\n    // );\n  }\n  handleSubmit=(values) => {\n    \n        alert(JSON.stringify(values, null, 2));\n       \n    };\n                  \n    // axios.post(\"http://localhost:4000/users/add-user\",  values)\n    // .then(console.log)\n    //  alert('SUCCESS!! ' )\n    \n\n \n    render() {\n        return (\n            <Formik\n                 initialValues={{ fname:\"\",lname:\"\",email: \"\", password: \"\" ,dob:\"\",profileImg:\"\"}}\n                validationSchema={LoginSchema}\n  \n                //onSubmit={this.handleSubmit}\n              \n                onSubmit={(values) => {\n                  // console.log(values);\n                  const formData = new FormData();\n\n                  formData.append('fname', values.fname);\n                  formData.append('lname', values.lname);\n                  formData.append('email', values.email);\n                  formData.append('password', values.password);\n                  formData.append('dob', values.dob);\n                  formData.append('profileImg', values.profileImg);\n                 // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n                 axios.post(\"http://localhost:4000/users/add-user\",  formData, {headers: {\n                  \"Content-Type\": \"multipart/form-data\",\n                },})\n                 .then(console.log)\n                 alert('SUCCESS!! ' )\n                // catch(console.error);\n        \n                   //  resetForm({});\n                   \n                 \n                    \n                  }}\n              \n              \n                render={({ setFieldValue, errors, status, touched }) => (\n                   \n                  <Form >\n                  <div className=\"form-group\">\n                      <label htmlFor=\"fname\">First Name</label>\n                      <Field\n                        type=\"text\"\n                        name=\"fname\"\n                        placeholder=\"Enter first name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"fname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"lname\">Last Name</label>\n                      <Field\n                        type=\"text\"\n                        name=\"lname\"\n                        placeholder=\"Enter last name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.lname && errors.lname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"lname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"email\">Email</label>\n                      <Field\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"email\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label htmlFor=\"password\" className=\"mt-3\">\n                        Password\n                      </label>\n                      <Field\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.password && errors.password\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"password\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"dob\" className=\"mt-3\">\n                        Date Of Birth\n                      </label>\n                      <Field\n                        type=\"date\"\n                        name=\"dob\"\n                        placeholder=\"Enter Date Of Birth\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.dob && errors.dob\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"dob\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                   \n                    <label htmlFor=\"imagem\" className=\"mt-3\">\n                        Upload Your Image\n                      </label>\n                     <br/>\n                   \n                    \n                     <input\n                id=\"file\"\n                name=\"profile\"\n                type=\"file\"\n                onChange={(event) => {\n                  const File = event.target.files[0];\n                  setFieldValue(\"profileImg\", File);\n                }}\n              />\n                  \n                   \n                        <div className=\"form-group\">\n                            <button type=\"submit\"  className=\"btn btn-primary mr-2\">Register</button>\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                        </div>\n                    </Form>\n                )}\n            />\n        )\n    }\n}\n\nexport default Adduserfun;\n"]},"metadata":{},"sourceType":"module"}