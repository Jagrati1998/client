{"ast":null,"code":"var _jsxFileName = \"/home/jagrati/usernex/client/src/components/adduserfunComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Basic extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          files: null\n        },\n        onSubmit: values => {\n          console.log({\n            files: values.files.map(file => ({\n              fileName: file.name,\n              type: file.type,\n              size: `${file.size} bytes`\n            }))\n          });\n        },\n        validationSchema: Yup.object().shape({\n          fname: Yup.string().min(3, \"fname must be 3 characters at minimum\").required(\"first name is required\"),\n          files: Yup.mixed().required()\n        }),\n        render: _ref => {\n          let {\n            values,\n            handleSubmit,\n            setFieldValue\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"fname\",\n                  children: \"First Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 35,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"fname\",\n                  placeholder: \"Enter first name\",\n                  autocomplete: \"off\",\n                  className: `mt-2 form-control\n                          ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 36,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  component: \"div\",\n                  name: \"fname\",\n                  className: \"invalid-feedback\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"file\",\n                children: \"Multiple files upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(UploadComponent, {\n                setFieldValue: setFieldValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this), values.files && values.files.map((file, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [`File:${file.name} Type:${file.type} Size:${file.size} bytes`, \" \"]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst UploadComponent = props => {\n  _s();\n\n  const {\n    setFieldValue\n  } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: \"dropzone\"\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drop the files here ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag 'n' drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UploadComponent, \"YfI2qKQYNDOj7ozxGshQtast5Mk=\", false, function () {\n  return [useDropzone];\n});\n\n_c = UploadComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadComponent\");","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/adduserfunComponent.js"],"names":["React","render","Formik","useDropzone","Yup","Basic","Component","files","values","console","log","map","file","fileName","name","type","size","object","shape","fname","string","min","required","mixed","handleSubmit","setFieldValue","touched","errors","i","UploadComponent","props","getRootProps","getInputProps","isDragActive","accept","onDrop","acceptedFiles","className"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\nimport \"bootstrap/dist/css/bootstrap.css\"\nexport default class Basic extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Formik\n          initialValues={{ files: null }}\n          onSubmit={values => {\n            console.log({\n              files: values.files.map(file => ({\n                fileName: file.name,\n                type: file.type,\n                size: `${file.size} bytes`\n              }))\n            });\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string()\n           .min(3, \"fname must be 3 characters at minimum\")\n           .required(\"first name is required\"),\n            files: Yup.mixed().required()\n          })\n          \n        }\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                <div className=\"form-group\">\n                        <label htmlFor=\"fname\">First Name</label>\n                        <Field\n                          type=\"text\"\n                          name=\"fname\"\n                          placeholder=\"Enter first name\"\n                          autocomplete=\"off\"\n                          className={`mt-2 form-control\n                          ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`}\n                        />\n  \n                        <ErrorMessage\n                          component=\"div\"\n                          name=\"fname\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                  <label htmlFor=\"file\">Multiple files upload</label>\n\n                  <UploadComponent setFieldValue={setFieldValue} />\n                  {values.files &&\n                    values.files.map((file, i) => (\n                      <li key={i}>\n                        {`File:${file.name} Type:${file.type} Size:${\n                          file.size\n                        } bytes`}{\" \"}\n                      </li>\n                    ))}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  submit\n                </button>\n              </form>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nconst UploadComponent = props => {\n  const { setFieldValue } = props;\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return (\n    <div>\n      {}\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}