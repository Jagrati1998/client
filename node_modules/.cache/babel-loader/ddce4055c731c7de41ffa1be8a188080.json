{"ast":null,"code":"var _jsxFileName = \"/home/jagrati/usernex/client/src/components/adduserfunComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst maxLength = 20;\n\nfunction nameLengthValidator(file) {\n  if (file.name.length > maxLength) {\n    return {\n      code: \"name-too-large\",\n      message: `Name is larger than ${maxLength} characters`\n    };\n  }\n\n  return null;\n}\n\nfunction Basic(props) {\n  _s();\n\n  const {\n    acceptedFiles,\n    fileRejections,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    validator: nameLengthValidator\n  });\n  const acceptedFileItems = acceptedFiles.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [file.path, \" - \", file.size, \" bytes\"]\n  }, file.path, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this));\n  const fileRejectionItems = fileRejections.map(_ref => {\n    let {\n      file,\n      errors\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [file.path, \" - \", file.size, \" bytes\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: errors.map(e => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: e.message\n        }, e.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, file.path, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: 'dropzone'\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag 'n' drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"(Only files with name less than 20 characters will be accepted)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Accepted files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: acceptedFileItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Rejected files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: fileRejectionItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Basic, \"yXCgq07ksXwRp3Sha5xhI1Qia8g=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Basic;\n\n/*#__PURE__*/\n_jsxDEV(Basic, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 1\n}, this);\n/*import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\n\nexport default class Basic extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Formik\n          initialValues={{ files: null }}\n          onSubmit={values => {\n            console.log({\n              files: values.files.map(file => ({\n                fileName: file.name,\n                type: file.type,\n                size: `${file.size} bytes`\n              }))\n            });\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string()\n           .min(3, \"fname must be 3 characters at minimum\")\n           .required(\"first name is required\"),\n            files: Yup.mixed().required()\n          })\n          \n        }\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"file\">Multiple files upload</label>\n\n                  <UploadComponent setFieldValue={setFieldValue} />\n                  {values.files &&\n                    values.files.map((file, i) => (\n                      <li key={i}>\n                        {`File:${file.name} Type:${file.type} Size:${\n                          file.size\n                        } bytes`}{\" \"}\n                      </li>\n                    ))}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  submit\n                </button>\n              </form>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nconst UploadComponent = props => {\n  const { setFieldValue } = props;\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return (\n    <div>\n      {}\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n      </div>\n    </div>\n  );\n};\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Basic\");","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/adduserfunComponent.js"],"names":["React","useDropzone","maxLength","nameLengthValidator","file","name","length","code","message","Basic","props","acceptedFiles","fileRejections","getRootProps","getInputProps","validator","acceptedFileItems","map","path","size","fileRejectionItems","errors","e","className"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;AAEA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,MAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,GAAmBJ,SAAvB,EAAkC;AAChC,WAAO;AACLK,MAAAA,IAAI,EAAE,gBADD;AAELC,MAAAA,OAAO,EAAG,uBAAsBN,SAAU;AAFrC,KAAP;AAID;;AAED,SAAO,IAAP;AACD;;AAED,SAASO,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA;AAJI,MAKFb,WAAW,CAAC;AACdc,IAAAA,SAAS,EAAEZ;AADG,GAAD,CALf;AASA,QAAMa,iBAAiB,GAAGL,aAAa,CAACM,GAAd,CAAkBb,IAAI,iBAC9C;AAAA,eACGA,IAAI,CAACc,IADR,SACiBd,IAAI,CAACe,IADtB;AAAA,KAASf,IAAI,CAACc,IAAd;AAAA;AAAA;AAAA;AAAA,UADwB,CAA1B;AAMA,QAAME,kBAAkB,GAAGR,cAAc,CAACK,GAAf,CAAmB;AAAA,QAAC;AAAEb,MAAAA,IAAF;AAAQiB,MAAAA;AAAR,KAAD;AAAA,wBAC5C;AAAA,iBACGjB,IAAI,CAACc,IADR,SACiBd,IAAI,CAACe,IADtB,yBAEE;AAAA,kBACGE,MAAM,CAACJ,GAAP,CAAWK,CAAC,iBACX;AAAA,oBAAkBA,CAAC,CAACd;AAApB,WAASc,CAAC,CAACf,IAAX;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAASH,IAAI,CAACc,IAAd;AAAA;AAAA;AAAA;AAAA,YAD4C;AAAA,GAAnB,CAA3B;AAWA,sBACE;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA,4BACE,oBAASL,YAAY,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAD,CAArB;AAAA,8BACE,sBAAWT,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAKI;AAAL;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA1CQX,K;UAMHR,W;;;KANGQ,K;;AA4CT;AAAA,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport React from 'react';\nimport {useDropzone} from 'react-dropzone';\n\nconst maxLength = 20;\n\nfunction nameLengthValidator(file) {\n  if (file.name.length > maxLength) {\n    return {\n      code: \"name-too-large\",\n      message: `Name is larger than ${maxLength} characters`\n    };\n  }\n\n  return null\n}\n\nfunction Basic(props) {\n  const {\n    acceptedFiles,\n    fileRejections,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    validator: nameLengthValidator\n  });\n\n  const acceptedFileItems = acceptedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n  const fileRejectionItems = fileRejections.map(({ file, errors }) => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n      <ul>\n        {errors.map(e => (\n          <li key={e.code}>{e.message}</li>\n        ))}\n      </ul>\n    </li>\n  ));\n\n  return (\n    <section className=\"container\">\n      <div {...getRootProps({ className: 'dropzone' })}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n        <em>(Only files with name less than 20 characters will be accepted)</em>\n      </div>\n      <aside>\n        <h4>Accepted files</h4>\n        <ul>{acceptedFileItems}</ul>\n        <h4>Rejected files</h4>\n        <ul>{fileRejectionItems}</ul>\n      </aside>\n    </section>\n  );\n}\n\n<Basic />\n\n\n/*import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\n\nexport default class Basic extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Formik\n          initialValues={{ files: null }}\n          onSubmit={values => {\n            console.log({\n              files: values.files.map(file => ({\n                fileName: file.name,\n                type: file.type,\n                size: `${file.size} bytes`\n              }))\n            });\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string()\n           .min(3, \"fname must be 3 characters at minimum\")\n           .required(\"first name is required\"),\n            files: Yup.mixed().required()\n          })\n          \n        }\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"file\">Multiple files upload</label>\n\n                  <UploadComponent setFieldValue={setFieldValue} />\n                  {values.files &&\n                    values.files.map((file, i) => (\n                      <li key={i}>\n                        {`File:${file.name} Type:${file.type} Size:${\n                          file.size\n                        } bytes`}{\" \"}\n                      </li>\n                    ))}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  submit\n                </button>\n              </form>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nconst UploadComponent = props => {\n  const { setFieldValue } = props;\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return (\n    <div>\n      {}\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n      </div>\n    </div>\n  );\n};\n*/\n"]},"metadata":{},"sourceType":"module"}