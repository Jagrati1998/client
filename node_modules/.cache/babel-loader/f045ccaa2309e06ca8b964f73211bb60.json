{"ast":null,"code":"var _jsxFileName = \"/home/jagrati/usernex/client/src/components/adduserComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios'; //import { toast } from \"react-toastify\";\n\nimport { useHistory } from \"react-router-dom\";\nimport config from '../../utils/config';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Adduserpage() {\n  _s();\n\n  // Note that we have to initialize ALL of fields with values. These\n  // could come from props, but since we don’t want to prefill this form,\n  // we just use an empty string. If we don’t do this, React will yell\n  // at us.\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: ''\n    },\n    onSubmit: values => {\n      const AddCompany = async () => {\n        e.preventDefault();\n        axios.post(`http://localhost:4000/users/add-user`, values).then(res => {\n          if (res.data.status_code === 200) {//setUser(res.data.msg)\n            //history.push(\"/settings/companies\");\n          }\n        }).catch(err => {\n          toast.error(\"Couldnot lpost data\");\n        });\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"firstName\",\n      children: \"First Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"firstName\",\n      name: \"firstName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      value: formik.values.firstName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"lastName\",\n      children: \"Last Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"lastName\",\n      name: \"lastName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      value: formik.values.lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      onChange: formik.handleChange,\n      value: formik.values.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 6\n  }, this);\n}\n\n_s(Adduserpage, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = Adduserpage;\n;\nexport default Adduserpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Adduserpage\");","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/adduserComponent.js"],"names":["React","Formik","Form","Button","axios","useHistory","config","useFormik","Yup","Adduserpage","formik","initialValues","firstName","lastName","email","onSubmit","values","AddCompany","e","preventDefault","post","then","res","data","status_code","catch","err","toast","error","handleSubmit","handleChange"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAGC,OAAOC,IAAP,MAAiB,sBAAjB;AACD,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;AAGA,SAASC,WAAT,GACA;AAAA;;AACG;AACA;AACA;AACA;AACA,QAAMC,MAAM,GAAGH,SAAS,CAAC;AACvBI,IAAAA,aAAa,EAAE;AACbC,MAAAA,SAAS,EAAE,EADE;AAEbC,MAAAA,QAAQ,EAAE,EAFG;AAGbC,MAAAA,KAAK,EAAE;AAHM,KADQ;AAOvBC,IAAAA,QAAQ,EAACC,MAAM,IACf;AACC,YAAMC,UAAU,GAAC,YAAY;AAC1BC,QAAAA,CAAC,CAACC,cAAF;AACAf,QAAAA,KAAK,CAACgB,IAAN,CAAY,sCAAZ,EAAkDJ,MAAlD,EACCK,IADD,CACMC,GAAG,IAAI;AACZ,cAAGA,GAAG,CAACC,IAAJ,CAASC,WAAT,KAAyB,GAA5B,EAAgC,CAC/B;AACA;AACA;AAEF,SAPA,EAQAC,KARA,CAQMC,GAAG,IAAI;AACbC,UAAAA,KAAK,CAACC,KAAN,CAAY,qBAAZ;AACD,SAVC;AAWA,OAbH;AAcF;AAvBwB,GAAD,CAAxB;AA0BA,sBACE;AAAM,IAAA,QAAQ,EAAElB,MAAM,CAACmB,YAAvB;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,IAAI,EAAC,WAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,EAAEnB,MAAM,CAACoB,YAJnB;AAKE,MAAA,KAAK,EAAEpB,MAAM,CAACM,MAAP,CAAcJ;AALvB;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,EAAEF,MAAM,CAACoB,YAJnB;AAKE,MAAA,KAAK,EAAEpB,MAAM,CAACM,MAAP,CAAcH;AALvB;AAAA;AAAA;AAAA;AAAA,YAXF,eAmBE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBE;AACE,MAAA,EAAE,EAAC,OADL;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,QAAQ,EAAEH,MAAM,CAACoB,YAJnB;AAKE,MAAA,KAAK,EAAEpB,MAAM,CAACM,MAAP,CAAcF;AALvB;AAAA;AAAA;AAAA;AAAA,YApBF,eA4BE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAhEOL,W;UAMSF,S;;;KANTE,W;AAgEP;AACD,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\n\n \n import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n//import { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport config from '../../utils/config';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n \n\nfunction Adduserpage() \n{\n   // Note that we have to initialize ALL of fields with values. These\n   // could come from props, but since we don’t want to prefill this form,\n   // we just use an empty string. If we don’t do this, React will yell\n   // at us.\n   const formik = useFormik({\n     initialValues: {\n       firstName: '',\n       lastName: '',\n       email: '',\n     },\n     \n     onSubmit:values=>\n     {\n      const AddCompany=async  ()=> {\n         e.preventDefault();\n         axios.post(`http://localhost:4000/users/add-user`,values)\n         .then(res => {\n          if(res.data.status_code === 200){\n           //setUser(res.data.msg)\n           //history.push(\"/settings/companies\");\n          }\n          \n        })\n        .catch(err => {\n         toast.error(\"Couldnot lpost data\")\n       }) \n        }\n   },\n })\n   \n   return (\n     <form onSubmit={formik.handleSubmit}>\n       <label htmlFor=\"firstName\">First Name</label>\n       <input\n         id=\"firstName\"\n         name=\"firstName\"\n         type=\"text\"\n         onChange={formik.handleChange}\n         value={formik.values.firstName}\n       />\n \n       <label htmlFor=\"lastName\">Last Name</label>\n       <input\n         id=\"lastName\"\n         name=\"lastName\"\n         type=\"text\"\n         onChange={formik.handleChange}\n         value={formik.values.lastName}\n       />\n \n       <label htmlFor=\"email\">Email Address</label>\n       <input\n         id=\"email\"\n         name=\"email\"\n         type=\"email\"\n         onChange={formik.handleChange}\n         value={formik.values.email}\n       />\n \n       <button type=\"submit\">Submit</button>\n     </form>\n   );\n };\n export default Adduserpage;\n\n\n\n "]},"metadata":{},"sourceType":"module"}