{"ast":null,"code":"var _jsxFileName = \"/home/jagrati/usernex/client/src/components/updatemyuserComponent.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { useDropzone } from 'react-dropzone';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { calendarFormat } from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst moment = require('moment');\n\nconst LoginSchema = Yup.object().shape({\n  fname: Yup.string().min(3, \"fname must be 3 characters at minimum\").required(\"first name is required\"),\n  lname: Yup.string().min(3, \"lname must be 3 characters at minimum\").required(\"last name is required\"),\n  email: Yup.string().email(\"Invalid email address format\").required(\"Email is required\"),\n  password: Yup.string().min(3, \"Password must be 3 characters at minimum\").required(\"Password is required\"),\n  dob: Yup.string().required(\"DOB is Required\").test(\"DOB\", \"Please choose a valid date of birth\", value => {\n    return moment().diff(moment(value), \"years\") >= 1;\n  }),\n  profileImg: Yup.mixed().required(\"image is Required\")\n});\n\nclass Updatemyuser extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onSubmit = values => {\n      alert(JSON.stringify(values, null, 2));\n      const formData = new FormData();\n      formData.append('fname', values.fname);\n      formData.append('lname', values.lname);\n      formData.append('email', values.email);\n      formData.append('password', values.password);\n      formData.append('dob', values.dob);\n      formData.append('profileImg', values.profileImg); // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n\n      axios.put(\"http://localhost:4000/users/update-user/:id'\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(console.log); //values.fname= \"\"; \n\n      alert('SUCCESS!! ');\n    };\n  }\n\n  Uploadimage(props) {\n    // alert(\"The function 'test' is executed\");\n\n    /*#__PURE__*/\n    _jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this); // const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n    // const files = acceptedFiles.map(file => (\n    //   <li key={file.path}>\n    //     {file.path} - {file.size} bytes\n    //   </li>\n    // ));\n    // return (\n    //   <section className=\"container\">\n    //     <div {...getRootProps({className: 'dropzone'})}>\n    //       <input {...getInputProps()} />\n    //       <p>Drag 'n' drop some files here, or click to select files</p>\n    //     </div>\n    //     <aside>\n    //       <h4>Files</h4>\n    //       <ul>{files}</ul>\n    //     </aside>\n    //   </section>\n    // );\n\n  } // handleSubmit=(values,{resetForm}) => {\n  //       alert(JSON.stringify(values, null, 2));\n  //       const formData = new FormData();\n  //                 formData.append('fname', values.fname);\n  //                 formData.append('lname', values.lname);\n  //                 formData.append('email', values.email);\n  //                 formData.append('password', values.password);\n  //                 formData.append('dob', values.dob);\n  //                 formData.append('profileImg', values.profileImg);\n  //                // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n  //                axios.put(\"http://localhost:4000/users/update-user/:id'\",  formData, {headers: {\n  //                 \"Content-Type\": \"multipart/form-data\",\n  //               },})\n  //                .then(console.log)\n  //                //values.fname= \"\"; \n  //                resetForm({values:\"\"})\n  //                alert('SUCCESS!! ' );\n  //   };\n\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    axios.get('http://localhost:4000/users/getuser' + id).then(res => {\n      this.setState({\n        fname: res.data.fname,\n        lname: res.data.lname,\n        dob: res.data.dob,\n        email: res.data.email,\n        password: res.data.password,\n        profileImg: res.data.profileImg\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } //   // axios.post(\"http://localhost:4000/users/update-user\",  values)\n  //   // .then(console.log)\n  //   //  alert('SUCCESS!! ' )\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          fname: \"\",\n          lname: \"\",\n          email: \"\",\n          password: \"\",\n          dob: \"\",\n          profileImg: \"\"\n        },\n        validationSchema: LoginSchema,\n        onSubmit: this.onSubmit // console.log(values);\n        // catch(console.error);\n        //  resetForm({});\n        ,\n        render: _ref => {\n          let {\n            setFieldValue,\n            errors,\n            status,\n            touched\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"fname\",\n                children: \"First ooName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                name: \"fname\",\n                placeholder: \"Enter first name\",\n                autoComplete: \"off\",\n                className: `mt-2 form-control\n                        ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"div\",\n                name: \"fname\",\n                className: \"invalid-feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"lname\",\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                name: \"lname\",\n                placeholder: \"Enter last name\",\n                autoComplete: \"off\",\n                className: `mt-2 form-control\n                        ${touched.lname && errors.lname ? \"is-invalid\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"div\",\n                name: \"lname\",\n                className: \"invalid-feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"email\",\n                name: \"email\",\n                placeholder: \"Enter email\",\n                autoComplete: \"off\",\n                className: `mt-2 form-control\n                        ${touched.email && errors.email ? \"is-invalid\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"div\",\n                name: \"email\",\n                className: \"invalid-feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"mt-3\",\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"password\",\n                name: \"password\",\n                placeholder: \"Enter password\",\n                className: `mt-2 form-control\n                        ${touched.password && errors.password ? \"is-invalid\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"div\",\n                name: \"password\",\n                className: \"invalid-feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"dob\",\n                className: \"mt-3\",\n                children: \"Date Of Birth\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"date\",\n                name: \"dob\",\n                placeholder: \"Enter Date Of Birth\",\n                className: `mt-2 form-control\n                        ${touched.dob && errors.dob ? \"is-invalid\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"div\",\n                name: \"dob\",\n                className: \"invalid-feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"imagem\",\n              className: \"mt-3\",\n              children: \"Upload Your Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"file\",\n              name: \"profile\",\n              type: \"file\",\n              onChange: event => {\n                const File = event.target.files[0];\n                setFieldValue(\"profileImg\", File);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                onClick: \"onSubmit()\",\n                className: \"btn btn-primary mr-2\",\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"reset\",\n                className: \"btn btn-secondary\",\n                children: \"Reset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 19\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Updatemyuser;","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/updatemyuserComponent.js"],"names":["React","axios","useDropzone","Formik","Field","Form","ErrorMessage","Yup","calendarFormat","moment","require","LoginSchema","object","shape","fname","string","min","required","lname","email","password","dob","test","value","diff","profileImg","mixed","Updatemyuser","Component","onSubmit","values","alert","JSON","stringify","formData","FormData","append","put","headers","then","console","log","Uploadimage","props","componentDidMount","id","match","params","get","res","setState","data","catch","error","render","setFieldValue","errors","status","touched","event","File","target","files"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {useDropzone} from 'react-dropzone'\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { calendarFormat } from 'moment';\nconst moment = require('moment');\n\nconst LoginSchema = Yup.object().shape({\n  fname: Yup.string()\n  .min(3, \"fname must be 3 characters at minimum\")\n  .required(\"first name is required\"),\n  lname: Yup.string()\n  .min(3, \"lname must be 3 characters at minimum\")\n  .required(\"last name is required\"),\n  email: Yup.string()\n    .email(\"Invalid email address format\")\n    .required(\"Email is required\"),\n  password: Yup.string()\n    .min(3, \"Password must be 3 characters at minimum\")\n    .required(\"Password is required\"),\n    dob:Yup.string()\n    .required(\"DOB is Required\")\n   \n    .test(\"DOB\", \"Please choose a valid date of birth\", (value) => {\n      return moment().diff(moment(value), \"years\") >= 1;\n    }),\n    profileImg: Yup.mixed().required(\"image is Required\")\n});\n\n\n\n\n\n\n\nclass Updatemyuser extends React.Component {\n  \n\n  Uploadimage(props) {\n   // alert(\"The function 'test' is executed\");\n    <Form>\n    <input type=\"file\"  ></input>\n    </Form>\n    // const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n    \n    // const files = acceptedFiles.map(file => (\n    //   <li key={file.path}>\n    //     {file.path} - {file.size} bytes\n    //   </li>\n    // ));\n  \n    // return (\n    //   <section className=\"container\">\n    //     <div {...getRootProps({className: 'dropzone'})}>\n    //       <input {...getInputProps()} />\n    //       <p>Drag 'n' drop some files here, or click to select files</p>\n    //     </div>\n    //     <aside>\n    //       <h4>Files</h4>\n    //       <ul>{files}</ul>\n    //     </aside>\n    //   </section>\n    // );\n  }\n  // handleSubmit=(values,{resetForm}) => {\n    \n  //       alert(JSON.stringify(values, null, 2));\n       \n  //       const formData = new FormData();\n\n  //                 formData.append('fname', values.fname);\n  //                 formData.append('lname', values.lname);\n  //                 formData.append('email', values.email);\n  //                 formData.append('password', values.password);\n  //                 formData.append('dob', values.dob);\n  //                 formData.append('profileImg', values.profileImg);\n  //                // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n  //                axios.put(\"http://localhost:4000/users/update-user/:id'\",  formData, {headers: {\n  //                 \"Content-Type\": \"multipart/form-data\",\n  //               },})\n  //                .then(console.log)\n  //                //values.fname= \"\"; \n  //                resetForm({values:\"\"})\n  //                alert('SUCCESS!! ' );\n                \n       \n  //   };\n    componentDidMount(){\n      const id=this.props.match.params.id;\n       \n       axios.get('http://localhost:4000/users/getuser' + id)\n        .then(res => {\n          this.setState({\n              fname:res.data.fname,\n              lname:res.data.lname,\n              dob:res.data.dob,\n              email:res.data.email,\n              \n              password:res.data.password,\n              profileImg:res.data.profileImg\n              \n           \n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        })\n      }\n                  \n  //   // axios.post(\"http://localhost:4000/users/update-user\",  values)\n  //   // .then(console.log)\n  //   //  alert('SUCCESS!! ' )\n    \n   onSubmit = (values) => {\n    alert(JSON.stringify(values, null, 2));\n       \n          const formData = new FormData();\n  \n                    formData.append('fname', values.fname);\n                    formData.append('lname', values.lname);\n                    formData.append('email', values.email);\n                    formData.append('password', values.password);\n                    formData.append('dob', values.dob);\n                    formData.append('profileImg', values.profileImg);\n                   // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n                   axios.put(\"http://localhost:4000/users/update-user/:id'\",  formData, {headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                  },})\n                   .then(console.log)\n                   //values.fname= \"\"; \n                 \n                   alert('SUCCESS!! ' );\n   \n     \n                }\n  \n\n    render() {\n    \n        return (\n          <div>\n            <Formik\n                 initialValues={{ fname:\"\",lname:\"\",email: \"\", password: \"\" ,dob:\"\",profileImg:\"\"}}\n                validationSchema={LoginSchema}\n  \n                onSubmit={this.onSubmit}\n              \n               \n                  // console.log(values);\n                  \n                // catch(console.error);\n        \n                   //  resetForm({});\n                   \n                 \n                    \n                 \n              \n              \n                render={({ setFieldValue, errors, status, touched }) => (\n                   \n                  <Form >\n                  <div className=\"form-group\">\n                      <label htmlFor=\"fname\">First ooName</label>\n                      <Field\n                        type=\"text\"\n                        name=\"fname\"\n                        placeholder=\"Enter first name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"fname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"lname\">Last Name</label>\n                      <Field\n                        type=\"text\"\n                        name=\"lname\"\n                        placeholder=\"Enter last name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.lname && errors.lname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"lname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"email\">Email</label>\n                      <Field\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"email\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label htmlFor=\"password\" className=\"mt-3\">\n                        Password\n                      </label>\n                      <Field\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.password && errors.password\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"password\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"dob\" className=\"mt-3\">\n                        Date Of Birth\n                      </label>\n                      <Field\n                        type=\"date\"\n                        name=\"dob\"\n                        placeholder=\"Enter Date Of Birth\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.dob && errors.dob\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"dob\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                   \n                    <label htmlFor=\"imagem\" className=\"mt-3\">\n                        Upload Your Image\n                      </label>\n                     <br/>\n                   \n                    \n                     <input\n                id=\"file\"\n                name=\"profile\"\n                type=\"file\"\n                onChange={(event) => {\n                  const File = event.target.files[0];\n                  setFieldValue(\"profileImg\", File);\n                }}\n              />\n                  \n                   \n                        <div className=\"form-group\">\n                            <button type=\"submit\" onClick=\"onSubmit()\" className=\"btn btn-primary mr-2\">Register</button>\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                        </div>\n                    </Form>\n                )}\n            />\n              </div>\n        )\n      \n    }\n   \n}\n\nexport default Updatemyuser;\n"]},"metadata":{},"sourceType":"module"}