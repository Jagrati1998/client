{"ast":null,"code":"/*import React from 'react';\nimport {useDropzone} from 'react-dropzone';\n\nfunction Basic(props) {\n  const {getRootProps, getInputProps, open, acceptedFiles} = useDropzone({\n    // Disable click and keydown behavior\n    noClick: true,\n    noKeyboard: true,\n    minSize:0,\n    maxSize:5242880\n  });\n\n\n    \n \n\n  return (\n    <div className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here</p>\n        <button type=\"button\" onClick={open}>\n          Open File Dialog\n        </button>\n      </div>\n      <aside>\n        <h4>Files</h4>\n        <ul>{files}</ul>\n      </aside>\n    </div>\n  );\n}\n\n\nexport default Basic;\n\n/*import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\n\nexport default class Basic extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Formik\n          initialValues={{ files: null }}\n          onSubmit={values => {\n            console.log({\n              files: values.files.map(file => ({\n                fileName: file.name,\n                type: file.type,\n                size: `${file.size} bytes`\n              }))\n            });\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string()\n           .min(3, \"fname must be 3 characters at minimum\")\n           .required(\"first name is required\"),\n            files: Yup.mixed().required()\n          })\n          \n        }\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"file\">Multiple files upload</label>\n\n                  <UploadComponent setFieldValue={setFieldValue} />\n                  {values.files &&\n                    values.files.map((file, i) => (\n                      <li key={i}>\n                        {`File:${file.name} Type:${file.type} Size:${\n                          file.size\n                        } bytes`}{\" \"}\n                      </li>\n                    ))}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  submit\n                </button>\n              </form>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nconst UploadComponent = props => {\n  const { setFieldValue } = props;\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return (\n    <div>\n      {}\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n      </div>\n    </div>\n  );\n};\nconst files = acceptedFiles.map(file => ( line 203\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n\n<Dropzone\n  onDrop={this.onDrop}\n  accept=\"image/png\"\n>\n  {({getRootProps, getInputProps, isDragActive, isDragReject}) => (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {!isDragActive && 'Click here or drop a file to upload!'}\n      {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n      {isDragReject && \"File type not accepted, sorry!\"}\n    </div>\n  )}\n</Dropzone>*/","map":{"version":3,"sources":["/home/jagrati/usernex/client/src/components/adduserfunComponent.js"],"names":[],"mappingssourcesContent":["\n/*import React from 'react';\nimport {useDropzone} from 'react-dropzone';\n\nfunction Basic(props) {\n  const {getRootProps, getInputProps, open, acceptedFiles} = useDropzone({\n    // Disable click and keydown behavior\n    noClick: true,\n    noKeyboard: true,\n    minSize:0,\n    maxSize:5242880\n  });\n\n\n    \n \n\n  return (\n    <div className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here</p>\n        <button type=\"button\" onClick={open}>\n          Open File Dialog\n        </button>\n      </div>\n      <aside>\n        <h4>Files</h4>\n        <ul>{files}</ul>\n      </aside>\n    </div>\n  );\n}\n\n\nexport default Basic;\n\n/*import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as Yup from \"yup\";\n\nexport default class Basic extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Formik\n          initialValues={{ files: null }}\n          onSubmit={values => {\n            console.log({\n              files: values.files.map(file => ({\n                fileName: file.name,\n                type: file.type,\n                size: `${file.size} bytes`\n              }))\n            });\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string()\n           .min(3, \"fname must be 3 characters at minimum\")\n           .required(\"first name is required\"),\n            files: Yup.mixed().required()\n          })\n          \n        }\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"file\">Multiple files upload</label>\n\n                  <UploadComponent setFieldValue={setFieldValue} />\n                  {values.files &&\n                    values.files.map((file, i) => (\n                      <li key={i}>\n                        {`File:${file.name} Type:${file.type} Size:${\n                          file.size\n                        } bytes`}{\" \"}\n                      </li>\n                    ))}\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  submit\n                </button>\n              </form>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nconst UploadComponent = props => {\n  const { setFieldValue } = props;\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFieldValue(\"files\", acceptedFiles);\n    }\n  });\n  return (\n    <div>\n      {}\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n      </div>\n    </div>\n  );\n};\nconst files = acceptedFiles.map(file => ( line 203\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n\n\n<Dropzone\n  onDrop={this.onDrop}\n  accept=\"image/png\"\n>\n  {({getRootProps, getInputProps, isDragActive, isDragReject}) => (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {!isDragActive && 'Click here or drop a file to upload!'}\n      {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n      {isDragReject && \"File type not accepted, sorry!\"}\n    </div>\n  )}\n</Dropzone>*/"]},"metadata":{},"sourceType":"module"}