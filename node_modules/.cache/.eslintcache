[{"/home/jagrati/usernex/client/src/index.js":"1","/home/jagrati/usernex/client/src/reportWebVitals.js":"2","/home/jagrati/usernex/client/src/App.js":"3","/home/jagrati/usernex/client/src/components/header.js":"4","/home/jagrati/usernex/client/src/components/addmyuserComponent.js":"5","/home/jagrati/usernex/client/src/components/showuserComponent.js":"6","/home/jagrati/usernex/client/src/components/userlistComponent.js":"7","/home/jagrati/usernex/client/src/components/addblogComponent.js":"8","/home/jagrati/usernex/client/src/components/showblogComponent.js":"9","/home/jagrati/usernex/client/src/components/bloglistComponent.js":"10","/home/jagrati/usernex/client/src/components/homeComponent.js":"11","/home/jagrati/usernex/client/src/components/updatemyuserComponent.js":"12","/home/jagrati/usernex/client/src/components/adduserComponent.js":"13"},{"size":799,"mtime":1648396880838,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1647252638681,"results":"16","hashOfConfig":"15"},{"size":3644,"mtime":1649324155285,"results":"17","hashOfConfig":"15"},{"size":634,"mtime":1648627068553,"results":"18","hashOfConfig":"15"},{"size":1809,"mtime":1649317520327,"results":"19","hashOfConfig":"15"},{"size":1145,"mtime":1649324549056,"results":"20","hashOfConfig":"15"},{"size":1470,"mtime":1649324624961,"results":"21","hashOfConfig":"15"},{"size":5385,"mtime":1649218034438,"results":"22","hashOfConfig":"15"},{"size":1139,"mtime":1648626204915,"results":"23","hashOfConfig":"15"},{"size":1128,"mtime":1648401719444,"results":"24","hashOfConfig":"15"},{"size":808,"mtime":1648627399800,"results":"25","hashOfConfig":"15"},{"size":9868,"mtime":1649310555516,"results":"26","hashOfConfig":"15"},{"size":8028,"mtime":1649336133182,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"1gtdijt",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jagrati/usernex/client/src/index.js",["74","75"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nimport { Navbar, NavbarBrand } from 'reactstrap';\n\n\nimport reportWebVitals from './reportWebVitals';\n//<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"></link>\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//<link\n  //rel=\"stylesheet\"\n  //href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n///>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["76","77"],"/home/jagrati/usernex/client/src/reportWebVitals.js",[],[],"/home/jagrati/usernex/client/src/App.js",[],[],"/home/jagrati/usernex/client/src/components/header.js",["78","79"],[],"/home/jagrati/usernex/client/src/components/addmyuserComponent.js",[],[],"/home/jagrati/usernex/client/src/components/showuserComponent.js",[],[],"/home/jagrati/usernex/client/src/components/userlistComponent.js",["80"],[],"import React, { Component } from 'react'\nimport Icon from '@mui/material/Icon';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport DeleteIcon from '@mui/icons-material/Delete';\n//import Avatar from '@mui/material/Avatar';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport Button from 'react-bootstrap/Button'\nconst moment = require('moment');\nmoment().format('YYYY-MM-DD');\n\nexport default class Userlist extends Component {\n  constructor(props) {\n    super(props)\n    this.deleteUser = this.deleteUser.bind(this)\n  }\n\n  deleteUser() {\n    axios\n      .delete(\n        'http://localhost:4000/users/delete-user/' + this.props.obj._id,\n      )\n      .then((res) => {\n        console.log('user successfully deleted!')\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n \n  render() {\n    return (\n     \n    <tr>\n    \n    <td>{this.props.obj.imagepath}</td>\n       \n       <td>{this.props.obj.fname}</td>\n      <td>{this.props.obj.lname}</td>\n       <td>{moment(this.props.obj.dob).format('YYYY-MM-DD')}</td>\n       <td>{this.props.obj.email}</td>\n       \n      \n       <td>\n       <Link\n         className=\"edit-link\" path={\"/getuser/:id\"}\n         to={'/update-user/:' + this.props.obj._id}\n         >\n            <BorderColorIcon/>\n         </Link>\n         <Button onClick={this.deleteUser} size=\"sm\" variant=\"danger\">\n        <DeleteIcon/>\n         </Button>  \n        </td>\n      </tr>\n     \n   )\n }\n}\n","/home/jagrati/usernex/client/src/components/addblogComponent.js",["81","82","83","84"],[],"import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {cols,minRows,rows} from 'react-bootstrap';\nimport * as Yup from \"yup\";\n//import \"bootstrap/dist/css/bootstrap.css\";\nimport axios from 'axios';\nconst moment = require('moment');\nconst BlogSchema = Yup.object().shape({\n  name: Yup.string()\n  .min(3, \"name must be 3 characters at minimum\")\n  .required(\" name is required\"),\n  blog: Yup.string()\n  .min(3, \"blog must be 3 characters at minimum\")\n  .required(\"blog is required\"),\n \n});\n\nclass Addblog extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <Formik\n              initialValues={{ email: \"\", password: \"\" }}\n              validationSchema={BlogSchema}\n              onSubmit={(values) => {\n               // console.log(values);\n               axios.post('http://localhost:4000/blogs/add-blog', values)\n              .then(res => console.log(res.data));\n                alert(\"Form is validated! Submitting the form...\");\n              }}\n            >\n              {({ touched, errors, isSubmitting, values }) =>\n                !isSubmitting ? (\n                  <div>\n                    \n                    <Form>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\"> Name</label>\n                        <Field\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"Enter name\"\n                          autocomplete=\"off\"\n                          className={`mt-2 form-control\n                          ${touched.name && errors.name ? \"is-invalid\" : \"\"}`}\n                        />\n  \n                        <ErrorMessage\n                          component=\"div\"\n                          name=\"name\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"blog\">Description</label>\n                        <Field as =\"textarea\"\n                         \n                          rows=\"5\"\n                          name=\"blog\"\n                          placeholder=\"Enter blog\"\n                          \n                          autocomplete=\"off\"\n                          className={`mt-2 form-control\n                          ${touched.blog && errors.blog ? \"is-invalid\" : \"\"}`}\n                        />\n  \n                        <ErrorMessage\n                          component=\"div\"\n                          name=\"blog\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      \n  \n                      \n                      <button\n                        type=\"submit\"\n                        className=\"btn btn-primary btn-block mt-4\"\n                      >\n                        Submit\n                      </button>\n                    </Form>\n                  </div>\n                ) : (\n                  <div>\n                    <h1 className=\"p-3 mt-5\">Form Submitted</h1>\n  \n                    <div className=\"alert alert-success mt-3\">\n                      Thank You for vist\n                    </div>\n                    \n                  </div>\n                )\n              }\n            </Formik>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n  \nexport default Addblog;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*import React, { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport {cols,minRows} from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\nexport default class AddMyblog extends Component {\n\n  constructor(props) {\n    super(props)\n\n    // Setting up functions\n    this.onChangeUserName = this.onChangeUserName.bind(this);\n    this.onChangeUserBlog= this.onChangeUserBlog.bind(this);\n   \n   \n    this.onSubmit = this.onSubmit.bind(this);\n\n    // Setting up state\n    this.state = {\n      name: '',\n      blog:'',\n      \n      \n    }\n  }\n\n  onChangeUserName(e) {\n    this.setState({ name: e.target.value })\n  }\n  onChangeUserBlog(e) {\n    this.setState({ blog: e.target.value })\n  }\n  \n  \n\n  \n\n\n  \n\n  onSubmit(e) {\n    e.preventDefault()\n\n    const blogObject = {\n      name: this.state.name,\n      blog: this.state.blog,\n      \n    };\n  \n  \n    axios.post('http://localhost:4000/blogs/blog', blogObject)\n     .then(res => console.log(res.data));\n\n      \n    this.setState({ name: '', blog:'' }) \n  }\n\n  render() {\n    return (\n    <div className=\"form-wrapper\">\n      <Form onSubmit={this.onSubmit}>\n      <Form.Group controlId=\"UserName\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control type=\"text\" value={this.state.name} onChange={this.onChangeUserName} required/>\n        </Form.Group>\n        <Form.Group controlId=\"UserBlog\" >\n          <Form.Label>Description</Form.Label>\n          <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"\n         value={this.state.blog} onChange={this.onChangeUserBlog}required />\n        </Form.Group>\n        \n     \n\n       \n        <Button variant=\"danger\" size=\"lg\" block=\"block\" type=\"submit\" className=\"mt-4\">\n         \n        </Button>\n      </Form>\n    </div>);\n  }\n}\n\n\n*/","/home/jagrati/usernex/client/src/components/showblogComponent.js",["85","86"],[],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport Table from 'react-bootstrap/Table';\nimport Bloglist from './bloglistComponent';\nimport Icon from '@mui/material/Icon';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport default class Showblog extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      blogs: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:4000/blogs/blog')\n      .then(res => {\n        this.setState({\n          blogs: res.data\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n  DataTable() {\n    return this.state.blogs.map((res, i) => {\n      return <Bloglist obj={res} key={i} />;\n    });\n  }\n\n\n  render() {\n    return (<div className=\"table-wrapper-showuser\">\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th> Name</th>\n            <th>Blog</th>\n            <th>Action </th>\n            \n           \n          </tr>\n        </thead>\n        <tbody>\n         \n          {this.DataTable()}\n          \n        </tbody>\n      </Table>\n      \n    </div>);\n  }\n}","/home/jagrati/usernex/client/src/components/bloglistComponent.js",["87","88","89"],[],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport Button from 'react-bootstrap/Button';\nimport Icon from '@mui/material/Icon';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport red from '@material-ui/core/colors/red';\n\nconst accent = red[800]; \n\nexport default class Bloglist extends Component {//userlist\n    constructor(props) {\n      super(props)\n    \n      this.deleteBlog = this.deleteBlog.bind(this)\n    }\n  \n    deleteBlog() {\n      axios\n        .delete(\n          'http://localhost:4000/blogs/delete-blog/' + this.props.obj._id,\n        )\n        .then((res) => {\n          console.log('user successfully deleted!')\n        })\n        .catch((error) => {\n          console.log(error)\n        })\n    }\n    \n   \n   \n    render() {\n      return (\n       \n      <tr>\n         <td>{this.props.obj.name}</td>\n        <td>{this.props.obj.blog}</td>\n        <td>\n       \n        <Button onClick={this.deleteBlog} size=\"sm\" variant=\"danger\">\n        <DeleteIcon/>\n         </Button>  \n         \n         </td>\n        </tr>\n       \n     )\n   }\n  }\n /**/","/home/jagrati/usernex/client/src/components/homeComponent.js",[],[],"/home/jagrati/usernex/client/src/components/updatemyuserComponent.js",["90","91"],[],"import React from 'react';\nimport axios from 'axios';\nimport {useDropzone} from 'react-dropzone'\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { calendarFormat } from 'moment';\nconst moment = require('moment');\n\nconst LoginSchema = Yup.object().shape({\n  fname: Yup.string()\n  .min(3, \"fname must be 3 characters at minimum\")\n  .required(\"first name is required\"),\n  lname: Yup.string()\n  .min(3, \"lname must be 3 characters at minimum\")\n  .required(\"last name is required\"),\n  email: Yup.string()\n    .email(\"Invalid email address format\")\n    .required(\"Email is required\"),\n  password: Yup.string()\n    .min(3, \"Password must be 3 characters at minimum\")\n    .required(\"Password is required\"),\n    dob:Yup.string()\n    .required(\"DOB is Required\")\n   \n    .test(\"DOB\", \"Please choose a valid date of birth\", (value) => {\n      return moment().diff(moment(value), \"years\") >= 1;\n    }),\n    profileImg: Yup.mixed().required(\"image is Required\")\n});\n\n\n\n\n\n\n\nclass Updatemyuser extends React.Component {\n  \n\n  Uploadimage(props) {\n   // alert(\"The function 'test' is executed\");\n    <Form>\n    <input type=\"file\"  ></input>\n    </Form>\n    // const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n    \n    // const files = acceptedFiles.map(file => (\n    //   <li key={file.path}>\n    //     {file.path} - {file.size} bytes\n    //   </li>\n    // ));\n  \n    // return (\n    //   <section className=\"container\">\n    //     <div {...getRootProps({className: 'dropzone'})}>\n    //       <input {...getInputProps()} />\n    //       <p>Drag 'n' drop some files here, or click to select files</p>\n    //     </div>\n    //     <aside>\n    //       <h4>Files</h4>\n    //       <ul>{files}</ul>\n    //     </aside>\n    //   </section>\n    // );\n  }\n  // handleSubmit=(values,{resetForm}) => {\n    \n  //       alert(JSON.stringify(values, null, 2));\n       \n  //       const formData = new FormData();\n\n  //                 formData.append('fname', values.fname);\n  //                 formData.append('lname', values.lname);\n  //                 formData.append('email', values.email);\n  //                 formData.append('password', values.password);\n  //                 formData.append('dob', values.dob);\n  //                 formData.append('profileImg', values.profileImg);\n  //                // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n  //                axios.put(\"http://localhost:4000/users/update-user/:id'\",  formData, {headers: {\n  //                 \"Content-Type\": \"multipart/form-data\",\n  //               },})\n  //                .then(console.log)\n  //                //values.fname= \"\"; \n  //                resetForm({values:\"\"})\n  //                alert('SUCCESS!! ' );\n                \n       \n  //   };\n    componentDidMount(){\n      const id=this.props.match.params.id;\n       \n       axios.get('http://localhost:4000/users/getuser/:' + id)\n        .then(res => {\n          this.setState({\n              fname:res.data.fname,\n              lname:res.data.lname,\n              dob:res.data.dob,\n              email:res.data.email,\n              \n              password:res.data.password,\n              profileImg:res.data.profileImg\n              \n           \n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        })\n      }\n                  \n  //   // axios.post(\"http://localhost:4000/users/update-user\",  values)\n  //   // .then(console.log)\n  //   //  alert('SUCCESS!! ' )\n    \n   onSubmit = (values) => {\n    alert(JSON.stringify(values, null, 2));\n       \n          const formData = new FormData();\n  \n                    formData.append('fname', values.fname);\n                    formData.append('lname', values.lname);\n                    formData.append('email', values.email);\n                    formData.append('password', values.password);\n                    formData.append('dob', values.dob);\n                    formData.append('profileImg', values.profileImg);\n                   // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(values, null, 4))\n                   axios.put(\"http://localhost:4000/users/update-user/:id'\",  formData, {headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                  },})\n                   .then(console.log)\n                   //values.fname= \"\"; \n                 \n                   alert('SUCCESS!! ' );\n   \n     \n                }\n  \n\n    render() {\n    \n        return (\n         \n          <div>\n             <h1>djkdjk</h1>\n            <Formik\n                 initialValues={{ fname:\"\",lname:\"\",email: \"\", password: \"\" ,dob:\"\",profileImg:\"\"}}\n                validationSchema={LoginSchema}\n  \n                onSubmit={this.onSubmit}\n              \n               \n                  // console.log(values);\n                  \n                // catch(console.error);\n        \n                   //  resetForm({});\n                   \n                 \n                    \n                 \n              \n              \n                render={({ setFieldValue, errors, status, touched }) => (\n                   \n                  <Form >\n                  <div className=\"form-group\">\n                      <label htmlFor=\"fname\">First ooName</label>\n                      <Field\n                        type=\"text\"\n                        name=\"fname\"\n                        placeholder=\"Enter first name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.fname && errors.fname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"fname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"lname\">Last Name</label>\n                      <Field\n                        type=\"text\"\n                        name=\"lname\"\n                        placeholder=\"Enter last name\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.lname && errors.lname ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"lname\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"email\">Email</label>\n                      <Field\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        autoComplete=\"off\"\n                        className={`mt-2 form-control\n                        ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                      />\n\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"email\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label htmlFor=\"password\" className=\"mt-3\">\n                        Password\n                      </label>\n                      <Field\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.password && errors.password\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"password\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"dob\" className=\"mt-3\">\n                        Date Of Birth\n                      </label>\n                      <Field\n                        type=\"date\"\n                        name=\"dob\"\n                        placeholder=\"Enter Date Of Birth\"\n                        className={`mt-2 form-control\n                        ${\n                          touched.dob && errors.dob\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      <ErrorMessage\n                        component=\"div\"\n                        name=\"dob\"\n                        className=\"invalid-feedback\"\n                      />\n                    </div>\n                   \n                    <label htmlFor=\"imagem\" className=\"mt-3\">\n                        Upload Your Image\n                      </label>\n                     <br/>\n                   \n                    \n                     <input\n                id=\"file\"\n                name=\"profile\"\n                type=\"file\"\n                onChange={(event) => {\n                  const File = event.target.files[0];\n                  setFieldValue(\"profileImg\", File);\n                }}\n              />\n                  \n                   \n                        <div className=\"form-group\">\n                            <button type=\"submit\" onClick=\"onSubmit()\" className=\"btn btn-primary mr-2\">Register</button>\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                        </div>\n                    </Form>\n                )}\n            />\n              </div>\n        )\n      \n    }\n   \n}\n\nexport default Updatemyuser;\n","/home/jagrati/usernex/client/src/components/adduserComponent.js",["92"],[],{"ruleId":"93","severity":1,"message":"94","line":7,"column":10,"nodeType":"95","messageId":"96","endLine":7,"endColumn":16},{"ruleId":"93","severity":1,"message":"97","line":7,"column":18,"nodeType":"95","messageId":"96","endLine":7,"endColumn":29},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"93","severity":1,"message":"102","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":15,"column":3,"nodeType":"105","endLine":15,"endColumn":27},{"ruleId":"93","severity":1,"message":"106","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":12},{"ruleId":"93","severity":1,"message":"107","line":3,"column":9,"nodeType":"95","messageId":"96","endLine":3,"endColumn":13},{"ruleId":"93","severity":1,"message":"108","line":3,"column":14,"nodeType":"95","messageId":"96","endLine":3,"endColumn":21},{"ruleId":"93","severity":1,"message":"109","line":3,"column":22,"nodeType":"95","messageId":"96","endLine":3,"endColumn":26},{"ruleId":"93","severity":1,"message":"110","line":7,"column":7,"nodeType":"95","messageId":"96","endLine":7,"endColumn":13},{"ruleId":"93","severity":1,"message":"106","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":12},{"ruleId":"93","severity":1,"message":"111","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":18},{"ruleId":"93","severity":1,"message":"112","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":14},{"ruleId":"93","severity":1,"message":"106","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":12},{"ruleId":"93","severity":1,"message":"113","line":10,"column":7,"nodeType":"95","messageId":"96","endLine":10,"endColumn":13},{"ruleId":"93","severity":1,"message":"114","line":3,"column":9,"nodeType":"95","messageId":"96","endLine":3,"endColumn":20},{"ruleId":"93","severity":1,"message":"115","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":24},{"ruleId":"93","severity":1,"message":"116","line":29,"column":7,"nodeType":"95","messageId":"96","endLine":29,"endColumn":12},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'NavbarBrand' is defined but never used.","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"'Component' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Icon' is defined but never used.","'cols' is defined but never used.","'minRows' is defined but never used.","'rows' is defined but never used.","'moment' is assigned a value but never used.","'DeleteIcon' is defined but never used.","'Link' is defined but never used.","'accent' is assigned a value but never used.","'useDropzone' is defined but never used.","'calendarFormat' is defined but never used.","'Thumb' is defined but never used.","no-global-assign","no-unsafe-negation"]